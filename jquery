prepare
plan
perform
perfect


//Prevent spoilerphobes from seeing spoilers
//Solution: Hide spoilers and reveal them through user interaction

//1. Hide spoiler
$(".spoiler span").hide();
//2. Add a button
$(".spoiler").append("<button>Reveal Spoiler!!</button>");
//3. When button pressed - 
$(".spoiler button").click(function(){
//4.show spoiler(span) next to the button.
  $(this).prev().show();
// 5.get rid of button
  $(this).remove();  
});





//Problem: user when clicking on images goes to a dead end
//Solution: Create an overlay with the large image - lightbox

//2. Add an overlay
var $overlay = $('<div id="overlay"></div>');

// 2.1 An image ..add the image inside the div
var $img = $("<img>");

var $caption = $("<p></p>");

$overlay.append($img);
//2.2 A caption to overlay
$overlay.append($caption);


//Be careful here append everything inside overlay before adding it to DOM in the next command. If  u try to append after adding it to DOM it wont work correctly.
$("body").append($overlay);
//1. Capture the click event on a link to an image--
 //1.1 Show the overlay
 //1.2 Update overlay with the image linked in the link
 //1.3 Get child's alt attribute and set caption.
//2. Add an overlay
  //2.1 An image
  //2.2 A caption 
//3. When overlay is clicked
  //3.1 Hide the overlay
//1. Capture the click event on a link to an image--
$("#imageGallery a").click(function(event){
    event.preventDefault();
    //Get the href of the image
    var imagelocation = $(this).attr("href");
    //Add the image src with the value of links  href inside overlay div
    $img.attr("src",imagelocation);
    //1.1 Show the overlay
    $overlay.show();
    //1.3 Get child's alt attribute and set caption.
  
    var $captiontext = $(this).children("img").attr("alt");
    $caption.text($captiontext);
  

});
//3. When overlay is clicked
$overlay.click(function(){
  //3.1 Hide the overlay
  $overlay.hide();
});



//Problem: It looks bad on small screen
//Sol: To hide text links and swap them with better nav

//Create a select and append to menu
//Cycle over menu links
  //Create an option
//  Options value is the href
//  Options text is the text of the link
//  Append option to select
//
//Create button
//Bind click to button
//  Go to select's location
//Modify CSS to hide links on small dev and show button and Selection 
//  Also hide select and button on larger screens




//Create a select and append to menu

var $select = $("<select></select>");
$("#menu").append($select);

//Cycle over menu links

$("#menu a").each(function() {
  var $anchor = $(this);
  //Create an option
  var $option = $("<option></option>");
  
//Deal with class selected options depending on current page
  if($anchor.parent().hasClass("selected")) {
     $option.prop("selected", true);
     }
  
//  Options value is the href
  $option.val($anchor.attr("href"));
//  Options text is the text of the link
 $option.text($anchor.text());  
//  Append option to select
  $select.append($option);
 
});

////Create button
//
//var $button = $("<button>Go</button>");
//$("#menu").append($button);
////Bind click to button
//$button.click(function() {
//  //Go to select's location
//  window.location = $select.val();
//});

//listen to change in the selection and change page
$select.change(function() {
  //Go to select's location
  window.location = $select.val();
});


//Problem: Hints are shown even when form is valid
//Solution: Hide and show them at appropriate times

//Hide hints

$("form span").hide();

function isPasswordValid() {
  return $("#password").val().length > 8;
}

function arePasswordsMatching() {
  return $("#password").val() === $("#confirm_password").val();
}

function canSubmit() {
  return isPasswordValid() && arePasswordsMatching();
}

function passwordEvent() {
   //Find out if the password is valid
  if(isPasswordValid())
  {
    //Hide hint if valid
    $("#password").next().hide();
  }
  else
  { 
    //Show hint if invalid
    $("#password").next().show();
  }
}

function confirmPasswordEvent() {
  //Find if password and confirm_password match each other
  if(arePasswordsMatching()) {
  //Hide hints if match
    $("#confirm_password").next().hide();
  }
  else
  {
   //Show hints if doesnt match
    $("#confirm_password").next().show();
  }
}

function enableSumbitEvent() {
  $("#submit").prop("disabled", !canSubmit());
}
//When event happens on password input
$("#password").focus(passwordEvent).keyup(passwordEvent).keyup(confirmPasswordEvent).keyup(enableSumbitEvent);
//When event happens on confirm password
$("#confirm_password").focus(confirmPasswordEvent).keyup(confirmPasswordEvent).keyup(enableSumbitEvent);

enableSumbitEvent();


//Pronlem: NO UI
//Sol: Provide UI

//When clicking on control list items
  //Diselect sibling elements.
  //Select clicked elements.

//When new color is pressed
  //Show colorselect hide colorselect

//When color sliders change
  //Update the color span

//When add color is pressed
  //Append the color to the controls ul
  //Select the new color.

//On mouse events on the canvas
  //Draw lines 

var color = $(".selected").css("background-color");
var $canvas = $("canvas");
var context = $canvas[0].getContext("2d");
var lastEvent;
var mouseDown = false;

//When clicking on control list items
$(".controls").on("click","li",function(){
    //Diselect sibling elements.
    $(this).siblings().removeClass("selected");
  
    //Select clicked elements.
    $(this).addClass("selected");
    //Cached current color
    color = $(this).css("background-color");
});

//When new color is pressed
$("#revealColorSelect").click(function() {
 
  changeColor();
  //Show colorselect hide colorselect
  $("#colorSelect").toggle();
});



//Update the color span
function changeColor() {
  var r = $("#red").val();
  var g = $("#green").val();
  var b = $("#blue").val();
  $("#newColor").css("background-color","rgb(" + r + "," + g + "," + b + ")");
};

//When color sliders change
$("input[type=range]").on("input",changeColor);

//When add color is pressed
 
  
$("#addNewColor").click(function() {
   //Append the color to the controls ul
  var $newColor = $("<li></li>");
  $newColor.css("background-color", $("#newColor").css("background-color"));
  $(".controls ul").append($newColor);
  //Select the new color.
  $newColor.click();
});

//On mouse events on the canvas
$canvas.mousedown(function(e) {
  lastEvent = e; //At this point check in console the value of lastEvent. it will show offsetX and offsetY
  mouseDown = true;
}).mousemove(function(f){
   //Draw lines 
  if(mouseDown)
  {
    context.beginPath();
    context.moveTo(lastEvent.offsetX,lastEvent.offsetY); //started mousedown/click here
    context.lineTo(f.offsetX,f.offsetY); //dragging the mouse..mousemove
    context.stroke(); //draw strokes
    context.strokeStyle = color;
    lastEvent = f; //will update last point so it will stroke in one line
  }
}).mouseup(function() {
  mouseDown = false; //stop drawinf
}).mouseleave(function() { //Fixing the bug here
  $canvas.mouseup(); //stop drawing on re entering the canvas
});
 


